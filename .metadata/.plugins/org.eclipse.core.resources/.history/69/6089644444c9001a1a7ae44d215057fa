package s10.Aula98_exercicio1.application;

import java.util.Scanner;

/**
 * Fazer um programa para ler dois números inteiros M e N,
 * e depois ler uma matriz de M linhas e N colunas contendo
 * números inteiros, podendo haver repetiões. Em seguida, ler
 * um número inteiro X que pertence à matriz. Para cada ocorrência
 * de X, mostrar os valores à esquerda, acima, à direita e abaixo
 * de X, quando houver, conforme exemplo.
 */

public class Program {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		int m = sc.nextInt();
		int n = sc.nextInt();
		
		Integer[][] matriz = new Integer[m][n];
		
		for (int i = 0; i < matriz.length; i++) {
			for (int j = 0; j < matriz[i].length; j++) {
				matriz[i][j] = sc.nextInt();
			}
		}
		
		int x = sc.nextInt();
		
		for (int i = 0; i < matriz.length; i++) {
			for (int j = 0; j < matriz[i].length; j++) {
				if (find(i, j, x, matriz)) {
					System.out.println("Position " + i + ", " + j + ":");
					if (hasLeft(i, j, matriz)) {
						System.out.println("Left: " + matriz[i][j]);
					}
				}
			}
		}
		
		sc.close();

	}
	
	public static boolean find(int i, int j, int x, Integer[][] matriz) {
		return matriz[i][j] == x ? true : false;
	}
	
	public static boolean hasLeft(int i, int j, Integer[][] matriz) {
		return matriz[i - 1][j] != null ? true : false;
	}
	
	public static boolean hasRight(int i, int j, Integer[][] matriz) {
		return matriz[i + 1][j] != null ? true : false;
	}
	
	public static boolean hasUp(int i, int j, Integer[][] matriz) {
		return matriz[i][j - 1] != null ? true : false;
	}
	
	public static boolean hasDown(int i, int j, Integer[][] matriz) {
		return matriz[i][j + 1] != null ? true : false;
	}

}
